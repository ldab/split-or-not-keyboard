/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zmk,kscan = &kscan;
        zmk,matrix_transform = &transform;
    };

    transform: transform {
        compatible = "zmk,matrix-transform";
        rows = <5>;
        columns = <12>;

        map = <
        RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)     RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)
        RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)     RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)
        RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)     RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)
        RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11)     RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5)
        RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)     RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5)
        >;
    };

    kscan: kscan {
        compatible = "zmk,kscan-composite";
        rows = <5>;
        columns = <12>;

        left {
            kscan = <&kscan_left>;
            column-offset = <6>;
        };

        right {
            kscan = <&kscan_right>;
        };
    };

    kscan_left: kscan_left {
        compatible = "zmk,kscan-gpio-matrix";

        // row2col set the column pins as inputs
        diode-direction = "row2col";

        // defaults:
        poll-period-ms = <10>;
        debounce-scan-period-ms = <1>;
        debounce-release-ms = <5>;
        debounce-press-ms = <5>;

        // Matrix column GPIOs in order, starting from the leftmost column
        col-gpios
        = <&gpioexp 2 (GPIO_ACTIVE_LOW)>
        , <&gpioexp 3 (GPIO_ACTIVE_LOW)>
        , <&gpioexp 4 (GPIO_ACTIVE_LOW)>
        , <&gpioexp 5 (GPIO_ACTIVE_LOW)>
        , <&gpioexp 6 (GPIO_ACTIVE_LOW)>
        , <&gpioexp 7 (GPIO_ACTIVE_LOW)>
        ;

        // Matrix row GPIOs in order, starting from the top row
        row-gpios
        = <&gpioexp 10 (GPIO_ACTIVE_LOW)>
        , <&gpioexp 9  (GPIO_ACTIVE_LOW)>
        , <&gpioexp 0  (GPIO_ACTIVE_LOW)>
        , <&gpioexp 1  (GPIO_ACTIVE_LOW)>
        , <&gpioexp 8  (GPIO_ACTIVE_LOW)>

        // Set unused GPIOS below as output otherwise float leaks
        , <&gpioexp 11  (GPIO_ACTIVE_HIGH)>
        , <&gpioexp 12  (GPIO_ACTIVE_HIGH)>
        , <&gpioexp 13  (GPIO_ACTIVE_HIGH)>
        , <&gpioexp 14  (GPIO_ACTIVE_HIGH)>
        , <&gpioexp 15  (GPIO_ACTIVE_HIGH)>
        ;
    };

    kscan_right: kscan_right {
        compatible = "zmk,kscan-gpio-matrix";

        // col2row set the column pins as outputs
        diode-direction = "col2row";

        // defaults:
        poll-period-ms = <10>;
        debounce-scan-period-ms = <1>;
        debounce-release-ms = <5>;
        debounce-press-ms = <5>;

        // Matrix column GPIOs in order, starting from the leftmost column
        col-gpios
        = <&gpio0 9   (GPIO_ACTIVE_HIGH)>
        , <&gpio0 10  (GPIO_ACTIVE_HIGH)>
        , <&xiao_d 7  (GPIO_ACTIVE_HIGH)>
        , <&xiao_d 8  (GPIO_ACTIVE_HIGH)>
        , <&xiao_d 9  (GPIO_ACTIVE_HIGH)>
        , <&xiao_d 10 (GPIO_ACTIVE_HIGH)>
        ;

        // Matrix row GPIOs in order, starting from the top row
        row-gpios
        = <&xiao_d 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&xiao_d 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&xiao_d 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&xiao_d 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&xiao_d 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        ;
    };

};

&xiao_i2c {
    clock-frequency = <I2C_BITRATE_FAST>;
    status = "okay";

    gpioexp: pca9535@20 {
        compatible = "nxp,pca95xx";
        reg = <0x20>;
        gpio-controller;
        #gpio-cells = <2>;
        ngpios = <16>;
        interrupt-gpios = <&gpio1 0 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    };
};

&xiao_spi {status = "disabled"; };
&xiao_serial {status = "disabled"; };